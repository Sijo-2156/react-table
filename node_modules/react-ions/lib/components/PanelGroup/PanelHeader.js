'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _OptClass = require('../internal/OptClass');

var _OptClass2 = _interopRequireDefault(_OptClass);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PanelHeader = function (_React$Component) {
  _inherits(PanelHeader, _React$Component);

  function PanelHeader(props) {
    _classCallCheck(this, PanelHeader);

    var _this = _possibleConstructorReturn(this, (PanelHeader.__proto__ || Object.getPrototypeOf(PanelHeader)).call(this, props));

    _this.handleClick = function (event) {
      if (_this.props.onPanelClick) {
        _this.props.onPanelClick(event, _this);
      }
    };

    return _this;
  }

  _createClass(PanelHeader, [{
    key: 'render',
    value: function render() {
      var iconProps = this.props.toggleIcon;
      var title = typeof this.props.title === 'string' ? _react2.default.createElement(
        'h4',
        null,
        this.props.title
      ) : this.props.title;
      var panelHeaderClasses = (0, _OptClass2.default)(_style2.default, ['panel-header'], this.props.optClass);

      return _react2.default.createElement(
        'div',
        { className: panelHeaderClasses, onClick: this.handleClick },
        !this.props.children ? _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'div',
            { className: _style2.default['title-group'] },
            this.props.contextNode ? _react2.default.createElement(
              'div',
              { className: _style2.default['context-node'] },
              this.props.contextNode
            ) : null,
            this.props.contextIcon ? _react2.default.createElement(
              'div',
              { className: _style2.default['context-icon'] },
              _react2.default.createElement(_Icon2.default, {
                name: this.props.contextIcon,
                height: this.props.contextIconSize,
                width: this.props.contextIconSize })
            ) : null,
            title
          ),
          _react2.default.createElement(
            'div',
            { className: _style2.default['toggle-icon'] },
            this.props.toggleIcon ? _react2.default.createElement(_Icon2.default, { name: iconProps.name, height: iconProps.size, width: iconProps.size }) : _react2.default.createElement(_Icon2.default, { name: 'md-keyboard-up', height: '16', width: '16' })
          )
        ) : this.props.children
      );
    }
  }]);

  return PanelHeader;
}(_react2.default.Component);

PanelHeader.propTypes = {
  /**
   * A title to be passed into the header
   */
  title: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string]),
  /**
   * An icon to be passed to the left of the header
   */
  contextIcon: _propTypes2.default.string,
  /**
   * The size of the context icon
   */
  contextIconSize: _propTypes2.default.string,
  /**
   * A node that can be passed to the left of the header
   */
  contextNode: _propTypes2.default.node,
  /**
   * An object of properties that define an icon: name, size, fill
   */
  toggleIcon: _propTypes2.default.object,
  /**
   * Optional CSS class(es) to be used for local styles (string or array of strings)
   */
  optClass: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string])
};
exports.default = PanelHeader;