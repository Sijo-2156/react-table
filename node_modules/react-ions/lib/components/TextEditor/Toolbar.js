'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _MergeTags = require('./MergeTags');

var _MergeTags2 = _interopRequireDefault(_MergeTags);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

require('../../styles/global/quill.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The Toolbar for the TextEditor component.
 */
var Toolbar = function (_PureComponent) {
  _inherits(Toolbar, _PureComponent);

  function Toolbar(props) {
    _classCallCheck(this, Toolbar);

    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, props));

    _this.componentDidMount = function () {
      _this.props.onMount(_this._toolbar);
    };

    _this.renderMergeTags = function () {
      var _this$props = _this.props,
          onMount = _this$props.onMount,
          other = _objectWithoutProperties(_this$props, ['onMount']);

      return _this.props.mergeTags ? _react2.default.createElement(_MergeTags2.default, other) : null;
    };

    _this.render = function () {
      return _react2.default.createElement(
        'div',
        { ref: function ref(c) {
            return _this._toolbar = c;
          } },
        _react2.default.createElement(
          'span',
          { className: 'ql-formats' },
          _react2.default.createElement('select', { className: 'ql-font' })
        ),
        _react2.default.createElement(
          'span',
          { className: 'ql-formats' },
          _react2.default.createElement(
            'select',
            { className: 'ql-header' },
            _react2.default.createElement('option', { value: '1' }),
            _react2.default.createElement('option', { value: '2' }),
            _react2.default.createElement('option', { value: '3' }),
            _react2.default.createElement('option', { value: '4' }),
            _react2.default.createElement('option', { value: '5' }),
            _react2.default.createElement('option', { value: '6' }),
            _react2.default.createElement('option', null)
          )
        ),
        _react2.default.createElement(
          'span',
          { className: 'ql-formats' },
          _react2.default.createElement('select', { className: 'ql-align' }),
          _react2.default.createElement('button', { className: 'ql-bold' }),
          _react2.default.createElement('button', { className: 'ql-italic' }),
          _react2.default.createElement('button', { className: 'ql-strike' }),
          _react2.default.createElement('button', { className: 'ql-underline' })
        ),
        _react2.default.createElement(
          'span',
          { className: 'ql-formats' },
          _react2.default.createElement('select', { className: 'ql-color' }),
          _react2.default.createElement('select', { className: 'ql-background' })
        ),
        _react2.default.createElement(
          'span',
          { className: 'ql-formats' },
          _react2.default.createElement('button', { className: 'ql-list', value: 'ordered' }),
          _react2.default.createElement('button', { className: 'ql-list', value: 'bullet' })
        ),
        _react2.default.createElement(
          'span',
          { className: 'ql-formats' },
          _react2.default.createElement('button', { className: 'ql-link' }),
          _react2.default.createElement('button', { className: 'ql-image' }),
          _react2.default.createElement('button', { className: 'ql-clean' })
        ),
        _this.renderMergeTags()
      );
    };

    return _this;
  }

  return Toolbar;
}(_react.PureComponent);

Toolbar.propTypes = {
  /**
   * The text editor.
   */
  textEditor: _propTypes2.default.object,
  /**
   * Merge tags to display in the toolbar.
   */
  mergeTags: _propTypes2.default.array,
  /**
   * A callback to be called when the component mounts.
   */
  onMount: _propTypes2.default.func
};
exports.default = Toolbar;