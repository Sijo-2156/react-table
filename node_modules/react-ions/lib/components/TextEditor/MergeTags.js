'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Dropdown = require('../Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

require('../../styles/global/quill.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The MergeTags component.
 */
var MergeTags = function (_PureComponent) {
  _inherits(MergeTags, _PureComponent);

  function MergeTags(props) {
    _classCallCheck(this, MergeTags);

    var _this = _possibleConstructorReturn(this, (MergeTags.__proto__ || Object.getPrototypeOf(MergeTags)).call(this, props));

    _this.insertTag = function (tag) {
      // Get selection and focus editor if necessary
      var range = _this.props.textEditor.getSelection(true);

      if (range.length > 0) {
        // Remove selected text
        _this.props.textEditor.deleteText(range.index, range.length);
      }

      // Insert the tag
      _this.props.textEditor.insertText(range.index, tag);

      // Set the cursor to the new position
      _this.props.textEditor.setSelection(range.index + tag.length);
    };

    _this.render = function () {
      var mergeTagsTrigger = _react2.default.createElement(
        'span',
        { className: 'ql-picker-label' },
        'Merge Tags ',
        _react2.default.createElement(
          'svg',
          { viewBox: '0 0 18 18' },
          ' ',
          _react2.default.createElement('polygon', { className: 'ql-stroke', points: '7 11 9 13 11 11 7 11' }),
          ' ',
          _react2.default.createElement('polygon', { className: 'ql-stroke', points: '7 7 9 5 11 7 7 7' }),
          ' '
        )
      );
      var mergeTags = _this.props.mergeTags.map(function (option) {
        return { name: option.name, callback: _this.insertTag.bind(_this, option.tag) };
      });

      return _react2.default.createElement(
        'span',
        { className: 'ql-formats' },
        _react2.default.createElement(
          'span',
          { className: _style2.default['merge-tags'] },
          _react2.default.createElement(_Dropdown2.default, { trigger: mergeTagsTrigger, listItems: mergeTags, optClass: 'ql-picker' })
        )
      );
    };

    return _this;
  }

  return MergeTags;
}(_react.PureComponent);

MergeTags.propTypes = {
  /**
   * The text editor.
   */
  textEditor: _propTypes2.default.object,
  /**
   * Merge tags to display.
   */
  mergeTags: _propTypes2.default.array.isRequired
};
exports.default = MergeTags;