'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _Popover = require('../Popover/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _Spinner = require('../Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var _ConfirmationOverlay = require('../internal/ConfirmationOverlay');

var _ConfirmationOverlay2 = _interopRequireDefault(_ConfirmationOverlay);

var _colors = require('../internal/colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toggle = function (_PureComponent) {
  _inherits(Toggle, _PureComponent);

  function Toggle(props) {
    _classCallCheck(this, Toggle);

    var _this = _possibleConstructorReturn(this, (Toggle.__proto__ || Object.getPrototypeOf(Toggle)).call(this, props));

    _this.state = {
      value: _this.props.value,
      text: ['Yes', 'No'],
      confirmIsOpen: false
    };

    _this.UNSAFE_componentWillReceiveProps = function (nextProps) {
      if (nextProps.value !== _this.props.value || _this.props.confirm) {
        _this.setState({ value: nextProps.value });
      }
    };

    _this.handleChange = function () {
      if (_this.props.disabled) return;

      if (_this.props.confirm === 'both' || _this.props.confirm === 'on' && !_this.state.value || _this.props.confirm === 'off' && _this.state.value) {
        _this.setState({ confirmIsOpen: true });
      } else {
        _this.toggleValue();
        _this.setState({ confirmIsOpen: false });
      }
    };

    _this.handleConfirmation = function (confirm, e) {
      e.stopPropagation();

      if (confirm) _this.toggleValue();

      _this.setState({ confirmIsOpen: false });
    };

    _this.toggleValue = function () {
      _this.setState({ value: !_this.state.value }, function () {
        _this.props.changeCallback && _this.props.changeCallback({
          target: { name: _this.props.name, value: _this.state.value }
        });
      });
    };

    _this.getToggleText = function (isOn) {
      if (!_this.props.hasText) return '';

      return isOn ? _this.state.text[0] : _this.state.text[1];
    };

    _this.render = function () {
      var cx = _bind2.default.bind(_style2.default);
      var onClass = _this.state.value ? _style2.default.on : '';
      var loadingClass = _this.props.loading ? _style2.default['toggle-loading'] : '';
      var innerLoading = _this.props.loading ? 'loading' : '';
      var outerClasses = cx(_style2.default.outer, onClass);
      var innerClasses = cx(_style2.default.inner, onClass, innerLoading);
      var textClasses = cx(_style2.default.text, onClass);
      var hasTextClass = _this.props.hasText ? _style2.default['has-text'] : _style2.default['no-text'];
      var disabledClass = _this.props.disabled || _this.state.confirmIsOpen ? _style2.default['toggle-disabled'] : '';
      var toggleWrapper = cx(_style2.default['toggle-wrapper'], disabledClass, hasTextClass);
      var toggleClass = cx(_style2.default['toggle-component'], loadingClass, _this.props.optClass);
      var toggleText = _this.getToggleText(onClass);
      var toggle = _react2.default.createElement(
        'div',
        { className: toggleWrapper },
        _react2.default.createElement('div', { className: outerClasses }),
        _this.props.hasText && _react2.default.createElement(
          'span',
          { className: textClasses },
          toggleText
        ),
        _react2.default.createElement(
          'div',
          { className: innerClasses },
          _this.props.loading && _react2.default.createElement(_Spinner2.default, { loading: true, type: 'spinner-circular', backgroundColor: 'transparent', color: _colors2.default.white, size: '16', className: _style2.default['toggle-loader'] })
        )
      );

      return _react2.default.createElement(
        'div',
        { className: toggleClass, onClick: _this.handleChange },
        _this.props.label && _react2.default.createElement(
          'label',
          { className: disabledClass },
          _this.props.label
        ),
        _this.props.confirm ? _react2.default.createElement(
          _Popover2.default,
          {
            showing: _this.state.confirmIsOpen,
            defaultPosition: 'bottom',
            content: _react2.default.createElement(_ConfirmationOverlay2.default, {
              handleConfirmation: _this.handleConfirmation,
              prompt: _this.props.confirmText }),
            width: _this.props.confirmWidth + 'px',
            onRequestClose: function onRequestClose() {
              return _this.setState({ confirmIsOpen: false });
            } },
          toggle
        ) : toggle
      );
    };

    return _this;
  }

  return Toggle;
}(_react.PureComponent);

Toggle.defaultProps = {
  disabled: false,
  value: false,
  hasText: false,
  loading: false,
  confirmWidth: '184'
};
Toggle.propTypes = {
  /**
   * Name of the toggle.
   */
  name: _propTypes2.default.string,
  /**
   * Value of the toggle.
   */
  value: _propTypes2.default.bool,
  /**
   * Text displayed with the toggle.
   */
  label: _propTypes2.default.string,
  /**
   * Whether the toggle is disabled.
   */
  disabled: _propTypes2.default.bool,
  /**
   * Optional styles to add to the toggle.
   */
  optClass: _propTypes2.default.string,
  /**
   * A callback function to be called when the toggle changes.
   */
  changeCallback: _propTypes2.default.func,
  /**
  * Boolean used to signify if text is used on the toggle
  */
  hasText: _propTypes2.default.bool,
  /**
  * Whether to display the sweet loader.
  */
  loading: _propTypes2.default.bool,
  /**
   * Prop to add a confirmation to the toggle when toggled on or off (or both)
  */
  confirm: _propTypes2.default.oneOf(['on', 'off', 'both']),
  /**
  * Prop to signify if the toggle should have a confirmation when toggled on or off (or both)
  */
  confirmText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  /**
  * Set the width of the confirmation popover
  */
  confirmWidth: _propTypes2.default.string
};
exports.default = Toggle;