'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tab = function (_React$Component) {
  _inherits(Tab, _React$Component);

  function Tab(props) {
    _classCallCheck(this, Tab);

    var _this = _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).call(this, props));

    _this.formatCount = function () {
      // Add thousands separator (',')
      return _this.props.count.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    };

    _this.handleClick = function (event) {
      if (_this.props.onClick && !_this.props.disabled) {
        _this.props.onClick(event, _this);
      }
    };

    return _this;
  }

  _createClass(Tab, [{
    key: 'render',
    value: function render() {
      var cx = _bind2.default.bind(_style2.default);
      var tabActiveClass = this.props.active ? 'active' : null;
      var tabDisabledClass = this.props.disabled ? 'disabled' : null;
      var tabClasses = cx(_style2.default.tab, this.props.optClass, tabActiveClass, tabDisabledClass);

      return _react2.default.createElement(
        'div',
        { className: tabClasses, onClick: this.handleClick, 'aria-selected': this.props.active },
        this.props.titlePrefix,
        this.props.title,
        ' ',
        this.props.count ? _react2.default.createElement(
          'span',
          { className: _style2.default.count },
          '(',
          this.formatCount(),
          ')'
        ) : null,
        this.props.titleSuffix
      );
    }
  }]);

  return Tab;
}(_react2.default.Component);

Tab.defaultProps = {};
Tab.propTypes = {
  /**
   * Whether the tab is active. Set by the tab wrapper component.
   */
  active: _propTypes2.default.bool,
  /**
   * Whether the tab is disabled.
   */
  disabled: _propTypes2.default.bool,
  /**
   * The tab count.
   */
  count: _propTypes2.default.number,
  /**
   * Optional styles to add to the tab header.
   */
  optClass: _propTypes2.default.string,
  /**
   * Optional styles to add to the tab content.
   */
  optTabContentClass: _propTypes2.default.string,
  /**
   * The tab title.
   */
  title: _propTypes2.default.string.isRequired,
  /**
   * Optional title prefix renders in front of the title.
   */
  titlePrefix: _propTypes2.default.node,
  /**
  * Optional title suffix renders after the title
  */
  titleSuffix: _propTypes2.default.node
};
exports.default = Tab;