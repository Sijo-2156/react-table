'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Typeahead = require('../Typeahead');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var wrapper = void 0,
    inst = void 0;

var options = [{ value: 'AT', display: 'Austria' }, { value: 'BM', display: 'Bermuda' }, { value: 10, display: 'Number' }];

it('should shallow render itself', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display' }));

  expect(wrapper).toMatchSnapshot();
});

it('should have placeholder text', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display', placeholder: 'test' }));

  expect(wrapper).toMatchSnapshot();
});

it('should have a label', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display', label: 'Typeahead Label' }));

  expect(wrapper).toMatchSnapshot();
});

it('should be disabled', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display', disabled: true }));

  expect(wrapper).toMatchSnapshot();
});

it('should have an extra class', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display', optClass: 'test-class' }));

  expect(wrapper).toMatchSnapshot();
});

it('should display a list when the user types a letter', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display' }));
  inst = wrapper.instance();

  inst.handleChange({ target: { value: 'a' } });

  wrapper.update();

  expect(wrapper).toMatchSnapshot();
});

it('should display a loader', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display', loading: true }));

  expect(wrapper).toMatchSnapshot();
});

it('should take a search callback', function () {
  var promiseOptions = [{ value: 'US', display: 'United States' }];
  var searchStub = _sinon2.default.stub().returns(Promise.resolve(promiseOptions));

  wrapper = mount(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display', searchCallback: searchStub }));
  wrapper.find('input').simulate('change', { target: { value: 'b' } });

  expect(searchStub.calledWithExactly('b')).toBe(true);
});

it('should have a custom search debounce time', function (done) {
  var promiseOptions = [{ value: 'US', display: 'United States' }];
  var searchStub = _sinon2.default.stub().returns(Promise.resolve(promiseOptions));

  wrapper = mount(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display', searchCallback: searchStub, searchDebounceTime: 200 }));
  wrapper.find('input').simulate('change', { target: { value: 'b' } });

  expect(searchStub.calledWithExactly('b')).toBe(false);

  setTimeout(function () {
    expect(searchStub.calledWithExactly('b')).toBe(true);
    done();
  }, 400);
});

it('should update when props are set', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display', value: 10, optClass: 'test-class' }));

  expect(wrapper).toMatchSnapshot();
});

it('should not clear search string after selection', function () {
  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { options: options, valueProp: 'value', displayProp: 'display' }));

  inst = wrapper.instance();

  wrapper.instance().handleChange({ target: { value: 'a' } });

  expect(wrapper.state('searchStr')).toEqual('a');

  wrapper.instance().selectOption(options[0]);
  expect(wrapper.state('searchStr')).toEqual('Austria');
});

it('should clear search string after selection', function () {
  wrapper = mount(_react2.default.createElement(_Typeahead.Typeahead, { resetAfterSelection: true, options: options, valueProp: 'value', displayProp: 'display' }));

  inst = wrapper.instance();

  inst.handleChange({ target: { value: 'a' } });

  expect(wrapper.state('searchStr')).toEqual('a');

  inst.selectOption(options[0]);
  expect(wrapper.state('searchStr')).toEqual('');
});

it('should clear search when the clear button is clicked', function () {
  wrapper = mount(_react2.default.createElement(_Typeahead.Typeahead, { resetAfterSelection: true, options: options, valueProp: 'value', displayProp: 'display', changeCallback: _sinon2.default.spy() }));

  inst = wrapper.instance();

  inst.handleChange({ target: { value: 'a' } });

  expect(wrapper.state('searchStr')).toEqual('a');

  inst.clearSearch();
  expect(wrapper.state('searchStr')).toEqual('');
});

it('should clear search string when input value is an empty string', function () {
  var changeCallback = _sinon2.default.spy();

  wrapper = mount(_react2.default.createElement(_Typeahead.Typeahead, { name: 'typeahead', resetAfterSelection: true, options: options, valueProp: 'value', displayProp: 'display', changeCallback: changeCallback }));

  var inputField = wrapper.find('input');

  inputField.simulate('change', { target: { value: 'a' } });
  expect(wrapper.state().searchStr).toEqual('a');

  inputField.simulate('change', { target: { value: '' } });
  expect(wrapper.state().searchStr).toEqual('');
  expect(changeCallback.calledWithExactly({ target: { name: 'typeahead', value: '', option: '' } })).toBe(true);
});

it('should set state when props are received', function () {
  var changeCallback = _sinon2.default.spy();

  wrapper = mount(_react2.default.createElement(_Typeahead.Typeahead, { name: 'typeahead', options: options, valueProp: 'value', displayProp: 'display', changeCallback: changeCallback }));

  wrapper.setProps({ value: 'AT' });

  expect(wrapper.state().selected.value).toEqual('AT');
  expect(wrapper.state().selected.display).toEqual('Austria');

  wrapper.setProps({ value: '' });

  expect(wrapper.state().selected).toEqual('');
});

it('should allow a custom value', function () {
  var changeCallback = _sinon2.default.spy();

  wrapper = mount(_react2.default.createElement(_Typeahead.Typeahead, { name: 'typeahead', options: options, valueProp: 'value', displayProp: 'display', allowCustomValue: true, changeCallback: changeCallback }));

  var inputField = wrapper.find('input');

  inputField.simulate('change', { target: { value: 'a random string' } });
  expect(changeCallback.calledWithExactly({ target: { name: 'typeahead', value: 'a random string' } })).toBe(true);
});

it('should set state when the value changes and a custom value is allowed', function () {
  var changeCallback = _sinon2.default.spy();

  wrapper = shallow(_react2.default.createElement(_Typeahead.Typeahead, { name: 'typeahead', options: options, valueProp: 'value', displayProp: 'display', allowCustomValue: true, changeCallback: changeCallback }));
  var inst = wrapper.instance();

  inst.UNSAFE_componentWillReceiveProps({ value: 'a random string', options: options });
  expect(wrapper.state().value).toEqual('a random string');
});