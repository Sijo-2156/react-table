'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Typeahead = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _fuzzy = require('fuzzy');

var _fuzzy2 = _interopRequireDefault(_fuzzy);

var _debounce = require('lodash/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _Spinner = require('../Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var _Input = require('../Input');

var _Input2 = _interopRequireDefault(_Input);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _StyledDiv = require('../StyledDiv');

var _StyledDiv2 = _interopRequireDefault(_StyledDiv);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Typeahead = exports.Typeahead = function (_React$Component) {
  _inherits(Typeahead, _React$Component);

  function Typeahead(props) {
    _classCallCheck(this, Typeahead);

    var _this = _possibleConstructorReturn(this, (Typeahead.__proto__ || Object.getPrototypeOf(Typeahead)).call(this, props));

    _this.state = {
      isActive: false,
      value: _this.props.value || '',
      results: [],
      selected: '',
      searchStr: _this.props.value || ''
    };

    _this.UNSAFE_componentWillMount = function () {
      if (typeof _this.state.value !== 'undefined' && _this.state.value !== '' && _this.getIndex(_this.state.value, _this.props.options) > -1) {
        _this.selectItem(_this.state.value, _this.props.options);
      } else {
        _this.setState({ selected: '' });
      }
    };

    _this.UNSAFE_componentWillReceiveProps = function (nextProps) {
      var _this$props = _this.props,
          allowCustomValue = _this$props.allowCustomValue,
          changeCallback = _this$props.changeCallback;

      var valueIsEmpty = nextProps.value === '';
      var valueChanged = nextProps.value !== _this.state.value;
      var optionsChanged = nextProps.options.length !== _this.props.options.length;
      var searchStringIsEmpty = _this.state.searchStr !== '';
      var optionExists = _this.getIndex(nextProps.value, nextProps.options) > -1;

      // If the option exists select it
      if (nextProps.value && (valueChanged || optionsChanged) && optionExists) {
        _this.setState({ value: nextProps.value }, function () {
          _this.selectItem(nextProps.value, nextProps.options);
        });
      }
      // Else if allowCustomValue is true trigger the change callback
      else if (nextProps.value && valueChanged && allowCustomValue) {
          _this.setState({ value: nextProps.value, searchStr: nextProps.value }, function () {
            changeCallback && changeCallback({ target: { name: nextProps.name, value: nextProps.value } });
          });
        }
        // When the value is an empty string and the current state value is not an empty string
        // Or when the value is an empty string and the search string exists
        // This ensures that 'custom' values are cleared
        else if (valueIsEmpty && valueChanged || allowCustomValue && valueIsEmpty && searchStringIsEmpty) {
            _this.clearSearch();
          }
    };

    _this.selectOption = function (option) {
      var normalizedOption = option.original ? option.original : option;

      var newState = {
        selected: normalizedOption,
        searchStr: normalizedOption[_this.props.displayProp],
        value: normalizedOption[_this.props.valueProp],
        isActive: false
      };

      if (_this.props.resetAfterSelection) {
        newState.searchStr = '';
        newState.value = '';

        // Focus the input field
        _this._inputField.focus();
      }

      _this.setState(newState, function () {
        if (typeof _this.props.changeCallback === 'function') {
          _this.props.changeCallback({
            target: {
              name: _this.props.name,
              value: normalizedOption[_this.props.valueProp],
              option: normalizedOption
            }
          });
        }
      });
    };

    _this.selectItem = function (value, options) {
      var index = _this.getIndex(value, options);

      if (index >= 0) {
        _this.selectOption(options[index], false);
      }
    };

    _this.getIndex = function (value, options) {
      var optionIndex = -1;

      options.map(function (option, index) {
        if (option[_this.props.valueProp] === value) {
          optionIndex = index;
        }
      });
      return optionIndex;
    };

    _this.handleChange = function (event) {
      if (!event.target.value.length) {
        _this.clearSearch();
        return;
      }

      _this.setState({ searchStr: event.target.value });

      if (_this.props.allowCustomValue) {
        _this.props.changeCallback({
          target: {
            name: _this.props.name,
            value: event.target.value
          }
        });
      }

      if (typeof _this.props.searchCallback === 'function') {
        _this.props.searchCallback(event.target.value).then(function (options) {
          _this.updateResults(event, options);
        });
      } else {
        _this.updateResults(event, _this.props.options);
      }
    };

    _this.handleClickOutside = function () {
      _this.setState({ isActive: false });
    };

    _this.updateResults = function (event, options) {
      var str = {
        pre: '<b>',
        post: '</b>',
        extract: function extract(el) {
          return el[_this.props.displayProp];
        }
      };

      if (_this.props.optionsFilterPredicate) {
        options = options.filter(_this.props.optionsFilterPredicate);
      }

      var results = _fuzzy2.default.filter(event.target.value, options, str);

      _this.setState({ results: results, isActive: true });
    };

    _this.getDynamicList = function (str) {
      return {
        __html: str
      };
    };

    _this.clearSearch = function () {
      _this.setState({ isActive: false, searchStr: '', selected: '', value: '' }, function () {
        if (typeof _this.props.changeCallback === 'function') {
          _this.props.changeCallback({
            target: {
              name: _this.props.name,
              value: '',
              option: ''
            }
          });
        }
      });
    };

    _this.onChange = typeof _this.props.searchCallback === 'function' && props.searchDebounceTime > 0 ? (0, _debounce2.default)(_this.handleChange, props.searchDebounceTime) : _this.handleChange;
    return _this;
  }

  _createClass(Typeahead, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var cx = _bind2.default.bind(_style2.default);
      var loaderClass = this.props.loading ? 'loading' : null;
      var typeaheadClass = cx(_style2.default['typeahead-component'], loaderClass, this.props.optClass);
      var typeaheadStyledClass = cx(_style2.default['typeahead-component-styled']);
      var typeaheadSpinnerClass = cx(_style2.default['typeahead-spinner']);

      var _props = this.props,
          placeholder = _props.placeholder,
          disabled = _props.disabled,
          loading = _props.loading,
          label = _props.label,
          width = _props.width;


      var listWidth = width ? { width: 'calc(' + width + ' - 4px)' } : null;

      var options = this.state.results.map(function (option, index) {
        return _react2.default.createElement('li', {
          key: index,
          onClick: _this2.selectOption.bind(null, option, true),
          dangerouslySetInnerHTML: _this2.getDynamicList(option.string) });
      });

      return _react2.default.createElement(
        'div',
        { className: typeaheadClass },
        label && _react2.default.createElement(
          'label',
          null,
          label
        ),
        _react2.default.createElement(
          _StyledDiv2.default,
          { css: { width: width, position: 'relative' }, className: typeaheadStyledClass },
          _react2.default.createElement(
            'div',
            { className: _style2.default['input-wrapper'] },
            _react2.default.createElement(_Input2.default, {
              ref: function ref(c) {
                return _this2._inputField = c;
              },
              changeCallback: this.onChange,
              value: this.state.searchStr,
              placeholder: placeholder,
              disabled: disabled
            }),
            this.state.searchStr !== '' && !loading && !disabled ? _react2.default.createElement(
              _Icon2.default,
              { name: 'md-close', onClick: this.clearSearch, width: '18', height: '18', fill: '#9198a0', className: _style2.default['reset-button'] },
              'Reset'
            ) : null
          ),
          _react2.default.createElement(_Spinner2.default, { loading: loading, type: 'spinner-circular', size: '16', className: typeaheadSpinnerClass }),
          this.state.isActive ? _react2.default.createElement(
            'ul',
            { className: _style2.default['typeahead-list'], style: listWidth },
            options
          ) : null
        )
      );
    }
  }]);

  return Typeahead;
}(_react2.default.Component);

Typeahead.defaultProps = {
  disabled: false,
  options: [],
  valueProp: '',
  displayProp: '',
  resetAfterSelection: false,
  searchDebounceTime: 0
};
Typeahead.propTypes = {
  /**
   * Name of the typeahead.
   */
  name: _propTypes2.default.string,
  /**
   * A string to display as the placeholder text.
   */
  placeholder: _propTypes2.default.string,
  /**
   * An array of objects which will be used as the options for the select field.
   */
  options: _propTypes2.default.array.isRequired,
  /**
   * Value of the typeahead.
   */
  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  /**
   * Which field in the option object will be used as the value of the select field.
   */
  valueProp: _propTypes2.default.string.isRequired,
  /**
   * Which field in the option object will be used as the display of the select field.
   */
  displayProp: _propTypes2.default.string.isRequired,
  /**
   * Whether the select field is disabled.
   */
  disabled: _propTypes2.default.bool,
  /**
   * Optional styles to add to the select field.
   */
  optClass: _propTypes2.default.string,
  /**
   * A callback function to be called when an option is selected.
   */
  changeCallback: _propTypes2.default.func,
  /**
   * A callback for updating options when typeahead search value is changed.
   */
  searchCallback: _propTypes2.default.func,
  /**
   * A loading state to be set to true when asynchronous searching is in progress.
   */
  loading: _propTypes2.default.bool,
  /**
   * A function to filter options.
   */
  optionsFilterPredicate: _propTypes2.default.func,
  /**
   * Clear search string after selection.
   */
  resetAfterSelection: _propTypes2.default.bool,
  /**
   * Search debounce time.
   */
  searchDebounceTime: _propTypes2.default.number,
  /**
   * Text shown above the typeahead.
   */
  label: _propTypes2.default.string,
  /**
   * When set to true, the component (input) will accept a custom value
   */
  allowCustomValue: _propTypes2.default.bool,
  /**
   * A helper will render inline style='width: <value>'.
   */
  width: _propTypes2.default.string
};
exports.default = (0, _reactClickOutside2.default)(Typeahead);