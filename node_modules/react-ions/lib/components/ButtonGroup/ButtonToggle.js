'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

var _Button = require('../Button/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonToggle component.
 */
var ButtonToggle = function (_React$Component) {
  _inherits(ButtonToggle, _React$Component);

  function ButtonToggle(props) {
    _classCallCheck(this, ButtonToggle);

    var _this = _possibleConstructorReturn(this, (ButtonToggle.__proto__ || Object.getPrototypeOf(ButtonToggle)).call(this, props));

    _this.handleChange = function (event) {
      if (typeof _this.props.changeCallback === 'function') {
        _this.props.changeCallback(event, _this.props.value);
      }
    };

    return _this;
  }

  _createClass(ButtonToggle, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          optClass = _props.optClass,
          type = _props.type,
          name = _props.name,
          value = _props.value,
          checked = _props.checked,
          disabled = _props.disabled,
          other = _objectWithoutProperties(_props, ['label', 'optClass', 'type', 'name', 'value', 'checked', 'disabled']);

      var cx = _bind2.default.bind(_style2.default);
      var disabledClass = this.props.disabled ? _style2.default['button-toggle-disabled'] : '';
      var activeClass = this.props.checked ? 'active' : '';
      var buttonToggleClass = cx(_style2.default['button-toggle-component'], optClass, disabledClass, activeClass);

      return _react2.default.createElement(
        'div',
        { className: buttonToggleClass },
        _react2.default.createElement('input', { type: 'radio', onChange: this.handleChange, name: name, value: value, checked: checked, disabled: disabled }),
        _react2.default.createElement(
          _Button2.default,
          _extends({ optClass: optClass }, other),
          label
        )
      );
    }
  }]);

  return ButtonToggle;
}(_react2.default.Component);

ButtonToggle.defaultProps = {
  checked: false,
  disabled: false
};
ButtonToggle.propTypes = {
  /**
   * True if the option is checked.
   */
  checked: _propTypes2.default.bool,
  /**
   * Whether the option is disabled.
   */
  disabled: _propTypes2.default.bool,
  /**
   * Text shown inside the button toggle element.
   */
  label: _propTypes2.default.string,
  /**
   * Value of the option.
   */
  value: _propTypes2.default.string,
  /**
   * Optional styles to add to the button toggle component.
   */
  optClass: _propTypes2.default.string,
  /**
   * Name specified in the ButtonGroup component.
   */
  name: _propTypes2.default.string,
  /**
   * A callback function (from ButtonGroup) to be called when the option is changed.
   */
  changeCallback: _propTypes2.default.func
};
exports.default = ButtonToggle;