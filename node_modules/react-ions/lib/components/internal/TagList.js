'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TagList = function (_React$Component) {
  _inherits(TagList, _React$Component);

  function TagList(props) {
    _classCallCheck(this, TagList);

    var _this = _possibleConstructorReturn(this, (TagList.__proto__ || Object.getPrototypeOf(TagList)).call(this, props));

    _this.removeTag = function (index) {
      _this.props.onRemove(index);
    };

    _this.renderTags = function () {
      return _this.props.tags.map(function (tag, index) {
        return _react2.default.createElement(
          'li',
          { key: index },
          _react2.default.createElement(
            'span',
            { className: _style2.default['text'] },
            tag[_this.props.displayProp]
          ),
          _react2.default.createElement(_Icon2.default, { name: 'md-close', fill: '#9198A0', onClick: _this.removeTag.bind(_this, index), width: '12', height: '12' })
        );
      });
    };

    return _this;
  }

  _createClass(TagList, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'ul',
        { className: _style2.default.taglist },
        this.renderTags()
      );
    }
  }]);

  return TagList;
}(_react2.default.Component);

TagList.defaultProps = {
  tags: []
};
TagList.propTypes = {
  /**
   * Tags to display.
   */
  tags: _propTypes2.default.array.isRequired,
  /**
   * Which field in the tag will be displayed.
   */
  displayProp: _propTypes2.default.string.isRequired,
  /**
   * A callback function to be called when a tag is removed.
   */
  onRemove: _propTypes2.default.func.isRequired
};
exports.default = TagList;